indent = paste(indent, "  ", sep = ""),
...
)
xx <- answer
stop()
}
cat(indent, "  ", "--", "Group target file: ", sep = "")
cat(tgt.stat.filename, "\n", sep = "")
}
}
run.all.PD.files <- function(
# src.groups.dir = file.path(TOP.SRC.DIR, "PD DATA"),
src.groups.dir = file.path(TOP.SRC.DIR, "Test Data"),
groups.subdirs = c("HC .PAR", "PD OFF MEDS .PAR", "PD ON MEDS .PAR"),
groups.names = c("HC", "PD.OFF.MEDS", "PD.ON.MEDS"),
src.ext = "PAR",
tgt.suffix = paste("PD", src.ext, "statComplex", VERSION, sep = "-"),
tgt.groups.dir = file.path(TOP.TGT.DIR, tgt.suffix),
tgt.ext = "csv",
overwrite = FALSE,
indent = "",
...
)
{
# Makes sure the target directory exists
dir.create(path = tgt.groups.dir, showWarnings = FALSE, recursive = TRUE, mode = "0711")
# Sets the name of the target file for the output
tgt.stat.basename <- paste(tgt.suffix, tgt.ext, sep = ".")
tgt.stat.filename <- file.path(tgt.groups.dir, tgt.stat.basename)
# If the target file exists and it should not be overwritten
if(all(file.exists(tgt.stat.filename), !overwrite))
{
cat(indent, "--", "Target file already exist", sep = "")
cat(" for these groups of subjects and was not overwritten\n", sep = "")
cat(indent, "  ", tgt.stat.filename, "\n", sep = "")
}
else
{
# Process each group in the data
n.groups <- length(groups.names)
for(i.group in 1:n.groups)
{
# Finds the source directory for the group's data
src.group.dir <- file.path(src.groups.dir, groups.subdirs[i.group])
if(! dir.exists(src.group.dir))
{
msg <- paste("directory", src.group.dir, "was not found",
"for group", groups.names[i.group])
stop(msg)
}
# # Sets the target directory for the group's statistics
# tgt.group.dir <- file.path(tgt.groups.dir, groups.subdirs[i.group])
#
# Processes the group
answer <- run.group.PD.files(
src.groups.dir = src.groups.dir,
group.subdir = groups.subdirs[i.group],
group.name = groups.names[i.group],
src.ext = src.ext,
tgt.groups.dir = tgt.groups.dir,
tgt.ext = tgt.ext,
overwrite = overwrite,
indent = indent,
...
)
break;
}
cat(indent, "--", "All target file: ", tgt.stat.filename, "\n", sep = "")
}
}
process.one.signal.old <- function(
group.name,
subject.id,
signal,
signal.name,
renyi.alpha = c(seq(0.50, 0.95, 0.05), 0.99999, seq(1.05, 2.00, 0.05)),
tsallis.q = c(seq(0.50, 0.95, 0.05), 0.99999, seq(1.05, 1.50, 0.05)),
escort.tsallis.q = c(seq(0.50, 0.95, 0.05), 0.99999, seq(1.05, 1.50, 0.05)),
base = 2,   # log base for entropies
min.emb.dim = 3,
max.emb.dim = 10,
indent = "",
...  # Pass to mean(), sd()
)
{
cat(indent, "-- Processing ", signal.name, "\n", sep = "")
ss <<- signal
Mean <- mean(signal, ...)
SD <- sd(signal, ...)
# emb.dim <- nonlinearTseries::estimateEmbeddingDim(signal, do.plot = TRUE)
emb.dim <- 5
emb.dim <- max(min.emb.dim, round(log(length(signal))), emb.dim)
emb.dim <- min(max.emb.dim, emb.dim)
opd <- ordinal_pattern_distribution(x = signal, ndemb = emb.dim)
opd2 <<- opd
N <- length(opd)
Smax.SR <- log(N, base = base)
Smaxs.T <- (1 - N^(1 - tsallis.q)) / (tsallis.q - 1)
Smaxs.G <- (1 - N^(1 - escort.tsallis.q)) / (escort.tsallis.q - 1)
S.S <- get.shannon.entropy(opd, base = base)
H.S <- S.S / Smax.SR
S.Rs <- sapply(renyi.alpha,
function(a) get.renyi.entropy(opd, alpha = a, base = base))
srs <<- S.Rs; names(srs) <<- renyi.alpha
S.R <- mean(S.Rs)
H.R <- S.R / Smax.SR
S.Ts <- sapply(tsallis.q,
function(q) get.tsallis.entropy(opd, q = q, base = base))
sts <<- S.Ts; names(sts) <<- tsallis.q
S.T <- mean(S.Ts)
H.Ts <- S.Ts / Smaxs.T
hts <<- H.Ts; names(hts) <<- tsallis.q
H.T <- mean(H.Ts)
S.Gs <- sapply(escort.tsallis.q,
function(q) get.escort.tsallis.entropy(opd, q = q, base = base))
sgs <<- S.Gs; names(sgs) <<- escort.tsallis.q
S.G <- mean(S.Gs)
H.Gs <- S.Gs / Smaxs.G
hgs <<- H.Gs; names(hgs) <<- escort.tsallis.q
H.G <- mean(H.Gs)
list(opd = opd,
df = data.frame(Signal = signal.name, Mean = Mean, SD = SD, emb.dim = emb.dim,
S.S = S.S, H.S = H.S,
S.R = S.R, H.R = H.R,
S.T = S.T, H.T = H.T,
S.G = S.G, H.G = H.G
)
)
}
test.uniform()
a <-runif(0,10)
a
a <-runif(10,20)
a <-runif(10,0)
a
a <-runif(10,0,10)
a
distribucion_normal <- runif(100,0,20)
distribucion_normal
summary(distribucion_normal)
min(distribucion_normal)
ls.str()
mi_df <- data.frame(
"entero" = 1:4,
"factor" = c("a", "b", "c", "d"),
"numero" = c(1.2, 3.4, 4.5, 5.6),
"cadena" = as.character(c("a", "b", "c", "d"))
)
mi_df
mi_df <- data.frame(
"entero" = c(1,2,3,4),
"factor" = c("a", "b", "c", "d"),
"numero" = c(1.2, 3.4, 4.5, 5.6),
"cadena" = as.character(c("a", "b", "c", "d"))
)
mi_df
mi_df <- data.frame(
"entero" = c("a","b","c","s"),
"factor" = c("a", "b", "c", "d"),
"numero" = c(1.2, 3.4, 4.5, 5.6),
"cadena" = as.character(c("a", "b", "c", "d"))
)
mi_df
ejemplo_dataframe <- data.frame(
"Edad" = c(20,21,22,23,24),
"Peso" = c(100,80,90,23,32),
"Estatura" = c(172,176,189,158,123)
)
ejemplo_dataframe
ejemplo_dataframe*2
ejemplo_dataframe*4
#Vector
ejemplo_vector<- c(1,2,3,4)
ejemplo2_vector<-c("Hola","Mundo")
ejemplo_vector
ejemplo2_vector
ejemplo2_vector*2
ejemplo_vector*2
ejemplo_matriz <- matrix(1:12, nrow = 5, ncol = 4)
ejemplo_matriz
ejemplo_matriz <- matrix(1:12, nrow = 3, ncol = 4)
ejemplo_matriz
a<- matrix(1,2,3)
a
a<- matrix((1,2,3), (2,3,4))
a<- matrix((1 2 3), (2 3 4))
a<-matrix(c(1,2,3), c(4,5,6))
a<-matrix(c(1,2,3) c(4,5,6))
a<-matrix((1,2,3) (4,5,6))
a<-matrix((1 2 3) (4 5 6))
a<-c(1,2,3)
b<-c(2,3,4)
c<-(a,b)
c<-(a b)
c<-cbind(a, b)
c
class(c)
ejemplo_matriz <- matrix(1:12, nrow = 3, ncol = 4)
vector_matriz<-c(1,2,3)
vector_matriz1<-c(3,4,5)
vector_matriz2<-c(5,6,7)
ejemplo_matriz1 <-cbind(vector_matriz,vector_matriz1,vector_matriz2)
ejemplo_matriz2 <-rbind(vector_matriz,vector_matriz1,vector_matriz2)
ejemplo_matriz1
ejemplo_matriz2
ejemplo_transpuesta <-t(ejemplo_matriz)
ejemplo_transpuesta
ejemplo_dataframe
ejemplo_dataframe$Edad
ejemplo_dataframe
ejemplo_lista <- list("lista_matriz" = ejemplo_matriz, "lista_vector"= ejemplo_vector)
ejemplo_lista
as.vector(ejemplo_matriz)
ejemplo_cast_vector_matriz<-as.vector(ejemplo_matriz)
ejemplo_cast_vector_matriz
ejemplo_matriz
ejemplo_matriz1
ejemplo_matriz1[vector_matriz]
ejemplo_matriz1[[1]]
ejemplo_matriz1[[2]]
ejemplo_matriz1[[,3]]
edades <- rnorm(n = 1500, mean = 15, sd = .75)
edades
layout(ejemplo_matriz)
layout.show(ejemplo_matriz)
layout.show(4)
layout(ejemplo_matriz)
layout.show(9)
distribucion_normal <- runif(100,0,20)
ejemplo_funcion <- function(
num1,
num2
) {
resultado <- num1 + num2
}
ejemplo_funcion()
ejemplo_funcion(1,2)
ejemplo_funcion <- function(
num1,
num2
) {
resultado <- num1 + num2
print(resultado)
}
ejemplo_funcion(1,2)
ejemplo_funcion <- function(
num1,
num2
) {
resultado <- num1 + num2
print("El resultado es: ", resultado)
}
ejemplo_funcion(1,2)
ejemplo_funcion <- function(
num1,
num2
) {
resultado <- num1 + num2
print("El resultado es: " + resultado)
}
ejemplo_funcion(1,2)
ejemplo_funcion <- function(
num1,
num2
) {
resultado <- num1 + num2
print("El resultado es: ")
print(resultado)
}
ejemplo_funcion(1,2)
ejemplo_funcion <- function(
num1,
num2
) {
resultado <- num1 + num2
print(resultado)
}
rep(1,2)
rep(1,6)
###################################################################################################################
#IF
nota <- 7
if(nota >= 4) {
print("Aprobado")
} else {
print("Reprobado")
}
###################################################################################################################
#IF
nota <- 7
if(nota >= 4) {
print("Aprobado")
} else {
print("Reprobado")
}
ifelse(ejemplo_vector>3,"TRUE","FALSE")
ejemplo_vector
###################################################################################################################
#FOR y WHILE
#Los for y while no son muy utilizados en R debido a que muchas operaciones en vectores pueden ser realizados de forma
#inmediata, por lo que dejan de ser necesarios.
#for(algo in algos){
#
#}
###################################################################################################################
#suma de los elementos
suma <- sum(ejemplo_vector)
suma
###################################################################################################################
#producto de los elementos de x
producto <- prod(ejemplo2_vector)
###################################################################################################################
#producto de los elementos de x
producto <- prod(ejemplo_vector)
producto
###################################################################################################################
#Valor max o min en el objeto
maximo <- max(ejemplo_vector)
minimo <- min(ejemplo_vector)
maximo
minimo
###################################################################################################################
#rango del objeto o c(min(x), max(x))
rango <- range(ejemplo_vector)
rango
#Ejemplo R
#ls() en la consola lista los objetos en memoria.
#La función  muestra algunos detalles de los objetos en memoria
#Para hacer print en solo un elemento de una estructura de datos se una nombreEstructura$nombreDeLaFilaOColumna
###################################################################################################################
#DATA FRAME: estructura de datos de dos dimensiones que acepta diferentes tipos, a diferencia de las matrices
#que solo aceptan 1.
#
#FILAS: representan casos
#COLUMNAS: representan atributos
#
ejemplo_dataframe <- data.frame(
"Edad" = c(20,21,22,23,24),
"Peso" = c(100,80,90,23,32),
"Estatura" = c(172,176,189,158,123)
)
###################################################################################################################
#Vector
#Cualquier operación usada es aplicada a todos los elementos del vector de forma inmediata
ejemplo_vector<- c(1,2,3,4)
ejemplo2_vector<-c("Hola","Mundo")
###################################################################################################################
#Matrices
#Se pueden crear de la manera en que sale abajo o como una unión de vectores.
#Para lo segundo es necesario usar cbind() o rbin(), en donde:
#cbind() para unir vectores, usando cada uno como una columna.
#rbind() para unir vectores, usando cada uno como una fila.
#vectores y matrices pueden contener NA
ejemplo_matriz <- matrix(1:12, nrow = 3, ncol = 4)
vector_matriz<-c(1,2,3)
vector_matriz1<-c(3,4,5)
vector_matriz2<-c(5,6,7)
ejemplo_matriz1 <-cbind(vector_matriz,vector_matriz1,vector_matriz2)
ejemplo_matriz2 <-rbind(vector_matriz,vector_matriz1,vector_matriz2)
#Para transponer una matriz:
ejemplo_transpuesta <-t(ejemplo_matriz)
###################################################################################################################
#LISTAS
#Son unidimensionales, pero pueden tener datos de distinto tipo y dimensiones.
ejemplo_lista <- list("lista_matriz" = ejemplo_matriz, "lista_vector"= ejemplo_vector)
###################################################################################################################
#"CASTEO" de estructuras de datos
#Función	Coerciona a	Coerciona exitosamente a
#as.vector()	   | Vector	  |  Matrices
#as.matrix()	   | Matrices	|  Vectores, Data frames
#as.data.frame()| Data     |  frame	Vectores, Matrices
#as.list()	     | Lista	  |   Vectores, Matrices, Data frames
ejemplo_cast_vector_matriz<-as.vector(ejemplo_matriz)
###################################################################################################################
#FUNCIONES
#Definir una función:
#nombre <- function(argumentos) {
#operaciones
#}
ejemplo_funcion <- function(
num1,
num2
) {
resultado <- num1 + num2
print(resultado)
}
###################################################################################################################
#IF
nota <- 7
if(nota >= 4) {
print("Aprobado")
} else {
print("Reprobado")
}
#Si se usa if para una lista, vector, etc (estructura de datos mayor a 1) solo se evaluará el primer elemento
#es por esto que existe otra forma de realizarlo:
#ifelse(vector, valor_si_TRUE, valor_si_FALSE)
ifelse(ejemplo_vector>3,"TRUE","FALSE")
###################################################################################################################
#FOR y WHILE
#Los for y while no son muy utilizados en R debido a que muchas operaciones en vectores pueden ser realizados de forma
#inmediata, por lo que dejan de ser necesarios.
#for(algo in algos){
#
#}
###################################################################################################################
#suma de los elementos
suma <- sum(ejemplo_vector)
###################################################################################################################
#producto de los elementos de x
producto <- prod(ejemplo_vector)
###################################################################################################################
#Valor max o min en el objeto
maximo <- max(ejemplo_vector)
minimo <- min(ejemplo_vector)
###################################################################################################################
#Índice del valor max o min
indice_max <- which.max(ejemplo_vector)
indice_min <- which.min(ejemplo_vector)
###################################################################################################################
#rango del objeto o c(min(x), max(x))
rango <- range(ejemplo_vector)
###################################################################################################################
#Cantidad de elementos del objeto
largo <- length(ejemplo_vector)
###################################################################################################################
#promedio de los elementos de x
media <- mean(ejemplo_vector)
###################################################################################################################
#mediana de los elementos de x
mediana <- median(ejemplo_vector)
###################################################################################################################
#var(x) o cov(x) varianza de los elementos de x (calculada en n−1); si x es una matriz o un marco
#de datos, se calcula la matriz de varianza-covarianza
###################################################################################################################
#cor(x) matriz de correlacion de ´ x si es una matriz o un marco de datos (1 si x es un vector)
###################################################################################################################
#var(x, y) o cov(x, y) covarianza entre x y y, o entre las columnas de x y y si son matrices o marcos de
#datos
###################################################################################################################
#cor(x, y) correlacion lineal entre ´ x y y, o la matriz de correlacion si ´ x y y son matrices o
#marcos de datos
###################################################################################################################
###################################################################################################################
###################################################################################################################
###################################################################################################################
#Genera una lista de 100 valores aleatorios entre 0 y 20 (de una distribución uniforme)
distribucion_normal <- runif(100,0,20)
###################################################################################################################
#Summary entrega datos sobre el arreglo entregado (min, max, media, mediana, etc).
resultados <-summary(distribucion_normal)
a<-("1","2","3")
a<-c("1","2","3")
b<-("a","b","c")
b<-c("a","b","c")
c<-do.call(paste,expand.grid(a,b))
c
signal <-c("ABP","RCBFV"," LCBFV", "ETCO2", "RCrCP", "RRAP", "HR", "SBP", "DBP", "LCrCP", "LRAP", "SRCBFV", "DRCBFV", "SLCBFV", "DLCBFV", "RIDX")
phase <-c("phase1","phase2","phase3")
group <-c("HC","ON","OFF")
c<-do.call(paste,expand.grid(signal, phase,phase))
c
library(tidyverse)
#DATA: DATOS ORIGINALES DE LA BASE DE DATOS, CON LOS POLÍTICOS Y SUS VOTOS
data <- read.csv("house-votes-84.data", header = TRUE, sep = ",",quote = "\"",fill=T)
colnames(data) <- c("classname", "handicappedinfants","waterprojectcostsharing","adoptionofthebudgetresolution","physicianfeefreeze","elsalvadoraid","religiousgroupsinschools","antisatellitetestban","aidtonicaraguancontras","mxmissile","immigration","synfuelscorporationcutback","educationspending","superfundrighttosue","crime","dutyfreeexports","exportadministrationactsouthafrica")
#DATA2: TABLA DE FRECUENCIA CON LA VOTACIÓN TOTAL (Y, N o ?)
data2 <- lapply(X=data,FUN = function(m) df <- summary(m))
class.name<-data2[1]
data2[1]<-NULL
data2<-do.call(rbind.data.frame, data2)
colnames(data2)<-c("?","n","y")
#DEMOCRATAS: TABLA DE FRECUENCIA CON LOS VOTOS SOLO DE LOS DEMÓCRATAS.
democratas <- filter(data, data$classname == "democrat")
democratas <- lapply(X=democratas, FUN = function(m) df <- summary(m))
democratas[1]<-NULL
dem<-do.call(rbind.data.frame, democratas)
colnames(dem)<-c("Democrat ?","Democrat n","Democrat y")
#REPUBLICANOS: TABLA DE FRECUENCIA CON LOS VOTOS SOLO DE LOS REPUBLICANOS
republicanos <- filter(data, data$classname == "republican")
republicanos <- lapply(X=republicanos, FUN = function(m) df <- summary(m))
republicanos[1]<-NULL
rep<-do.call(rbind.data.frame, republicanos)
colnames(rep)<-c("Republicanos ?","Republicanos n","Republicanos y")
setwd("/Users/cata/Desktop/Lab-analisis-de-datos/Lab1")
library(tidyverse)
#setwd("/Users/cata/Desktop/Lab-analisis-de-datos/Lab1")
#DATA: DATOS ORIGINALES DE LA BASE DE DATOS, CON LOS POLÍTICOS Y SUS VOTOS
data <- read.csv("house-votes-84.data", header = TRUE, sep = ",",quote = "\"",fill=T)
colnames(data) <- c("classname", "handicappedinfants","waterprojectcostsharing","adoptionofthebudgetresolution","physicianfeefreeze","elsalvadoraid","religiousgroupsinschools","antisatellitetestban","aidtonicaraguancontras","mxmissile","immigration","synfuelscorporationcutback","educationspending","superfundrighttosue","crime","dutyfreeexports","exportadministrationactsouthafrica")
#DATA2: TABLA DE FRECUENCIA CON LA VOTACIÓN TOTAL (Y, N o ?)
data2 <- lapply(X=data,FUN = function(m) df <- summary(m))
class.name<-data2[1]
data2[1]<-NULL
data2<-do.call(rbind.data.frame, data2)
colnames(data2)<-c("?","n","y")
#DEMOCRATAS: TABLA DE FRECUENCIA CON LOS VOTOS SOLO DE LOS DEMÓCRATAS.
democratas <- filter(data, data$classname == "democrat")
democratas <- lapply(X=democratas, FUN = function(m) df <- summary(m))
democratas[1]<-NULL
dem<-do.call(rbind.data.frame, democratas)
colnames(dem)<-c("Democrat ?","Democrat n","Democrat y")
#REPUBLICANOS: TABLA DE FRECUENCIA CON LOS VOTOS SOLO DE LOS REPUBLICANOS
republicanos <- filter(data, data$classname == "republican")
republicanos <- lapply(X=republicanos, FUN = function(m) df <- summary(m))
republicanos[1]<-NULL
rep<-do.call(rbind.data.frame, republicanos)
colnames(rep)<-c("Republicanos ?","Republicanos n","Republicanos y")
a<-c(data2,dem,rep)
a
b<-do.call(rbind.data.frame, a)
b
